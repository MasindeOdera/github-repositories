{"version":3,"sources":["gif/spinner.gif","actions/reposActions.js","actions/types.js","components/SearchBar.js","components/Spinner.js","components/GithubRepo.js","components/AccountDetail.js","reducers/reposReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","fetchRepos","query","dispatch","fetch","then","res","json","data","type","payload","console","log","SearchBar","props","state","updatedPageNumber","timeout","handleChange","bind","handleSubmit","e","preventDefault","this","fetchQuery","target","value","setLoading","searchText","clearTimeout","setTimeout","Fragment","style","display","onSubmit","name","placeholder","flex","padding","search","onChange","autoComplete","className","Component","protoTypes","PropTypes","func","isRequired","connect","repos","currentPage","Spinner","src","spinner","width","margin","alt","Accounts","React","lazy","ResultNotFound","GithubRepo","totalCount","loading","totalPages","setState","content","miliseconds","Math","round","performance","getEntries","duration","length","map","index","key","header","fallback","prototypes","updateTotalCount","array","items","AccountDetail","user","userData","params","match","owner","detail","to","avatar_url","login","bio","location","following","followers","onClick","window","open","html_url","detailView","storeDetail","findUser","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","f","App","exact","path","component","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ea52de41.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.bd0201f1.gif\";","import { FETCH_REPOS, FETCH_QUERY, STORE_DETAIL, FIND_USER, LOADING, UPDATE_TOTAL_COUNT } from './types';\n\nexport const fetchRepos = (query) => dispatch => {\n    // const pageNumber = updatedPageNumber ? updatedPageNumber : 1;\n    fetch(`https://api.github.com/search/repositories?q=${query}+in:repositories?page=${1}&per_page=100`)\n    .then(res => res.json())\n    .then(data => dispatch({\n        type: FETCH_REPOS,   \n        payload: data,     \n    })).then(data => console.log(data));\n};\n\nexport const fetchQuery = query => {\n    return {\n        type: FETCH_QUERY,\n        payload: query\n    }\n};\n\nexport const storeDetail = () => dispatch => {\n    dispatch({\n        type: STORE_DETAIL,\n    })\n};\n\nexport const findUser = user => dispatch => {\n    fetch(`https://api.github.com/search/users?q=${user}`)\n    .then(res => res.json())\n    .then(data => dispatch({\n        type: FIND_USER,\n        payload: data.items,\n    })).then(data => console.log(data));\n};\n\nexport const setLoading = () => {\n    return {\n        type: LOADING\n    }\n};\n\nexport const updateTotalCount = totalCount => {\n    return {\n        type: UPDATE_TOTAL_COUNT,\n        payload: totalCount\n    }\n};\n","export const FETCH_REPOS = 'FETCH_REPOS';\nexport const FETCH_QUERY = 'FETCH_QUERY';\nexport const STORE_DETAIL = 'STORE_DETAIL';\nexport const FIND_USER = 'FIND_USER';\nexport const LOADING = 'LOADING';\nexport const UPDATE_TOTAL_COUNT = 'UPDATE_TOTAL_COUNT';","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchQuery, fetchRepos, setLoading } from '../actions/reposActions';\nimport '../App.css';\n\nclass SearchBar extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { query: this.props.query, updatedPageNumber: 0};\n        this.timeout =  0;\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    \n    handleChange(e) {\n        e.preventDefault();\n        this.props.fetchQuery(e.target.value);\n        this.props.setLoading();\n\n        //This allows the user to search without hitting submit.\n        let searchText = e.target.value;\n        if(this.timeout) clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => {\n            this.props.fetchRepos(searchText);\n        }, 600);\n    }\n    \n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.setLoading();\n        // only fetchRepos if a query is defined.\n        if(this.props.query !== 'undefined') {\n            this.props.fetchRepos(this.updatedPageNumber, this.props.query);\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <form style={{ display: 'flex' }} onSubmit={this.handleSubmit}>\n                    <input \n                        type=\"text\" \n                        name=\"title\" \n                        placeholder=\"Search github repositories...\" \n                        style={{flex: '10', padding: '5px'}}\n                        value = {this.state.search}\n                        onChange = {this.handleChange}\n                        autoComplete=\"off\"\n                    />\n                    <input\n                        type=\"submit\"\n                        value=\"Search\"\n                        className=\"btn\"\n                        style={{flex: '1'}}\n                    />\n                </form>\n            </React.Fragment>\n        )\n    }\n}\n\nSearchBar.protoTypes = {\n    fetchQuery: PropTypes.func.isRequired,\n    fetchRepos: PropTypes.func.isRequired,\n    setLoading: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    query: state.repos.query,\n    updatedPageNumber: state.repos.currentPage,\n});\n\nexport default connect(mapStateToProps, { fetchQuery, fetchRepos, setLoading })(SearchBar);\n","import React from 'react';\nimport spinner from '../gif/spinner.gif';\n\nfunction Spinner() {\n    return (\n        <div>\n            <img \n                src={spinner}\n                style={{ width: '200px', margin: 'auto', display: 'block' }}\n                alt=\"Loading...\"\n            />    \n        </div>\n    )\n}\n\nexport default Spinner;\n","import React, { Component, Suspense } from 'react';\nimport Spinner from './Spinner';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchRepos, updateTotalCount } from '../actions/reposActions';\nimport '../App.css';\n\nconst Accounts = React.lazy(() => import('./Accounts'));\nconst ResultNotFound = React.lazy(() => import('./ResultNotFound'));\n\nexport class GithubRepo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            repos: this.props.repos,\n            totalCount: this.props.totalCount,\n            loading: this.props.loading,\n            totalPages: this.props.totalPages,\n            currentPage: this.props.currentPage,\n        }\n    }\n\n    componentDidMount() {\n        this.setState({repos: this.props.repos});\n        this.setState({totalCount: this.props.totalCount});\n\n        // const getPagesCount = (total, denominator) => {\n        //     total = this.props.totalCount;\n        //     denominator = 100;\n        //     const divisible = total % denominator === 0;\n        //     const valueToBeAdded = divisible ? 0 : 1;\n        //     let totalPages = Math.floor(total / denominator) + valueToBeAdded;\n        //     this.setState({totalPages: totalPages});\n        //     return Math.floor(total / denominator) + valueToBeAdded;\n        // };\n    }\n\n    render() {\n        // console.log(Intl.DateTimeFormat().resolvedOptions().timeZone);\n        const {query, repos, totalCount, loading} = this.props;\n        let miliseconds = Math.round(performance.getEntries('measure')[0].duration);\n        let content = '';\n        //If loading is true, then content and header should not be visible.\n        content = repos.length > 0 && !loading ? repos.map((repos, index) => <Accounts key={index} repos={repos} />) : null;\n        const header = repos.length > 0 && !loading ? <thead><tr><th>Avatar</th><th>Name</th><th>Description</th><th>Created</th><th>Watchers</th><th>Private</th></tr></thead> : null;\n\n        return (\n            <div>\n                <Suspense fallback={<div>Loading, please wait...</div>}>\n                    {/* The h1 is only displayed once the user types */}\n                    { query ? <h1 style={{margin: '10px 0px 10px 0px',}}>Displaying Repositories with \"{query}\"</h1> : null}\n                    {/* The Spinner is only visible when loading is true */}\n                    {loading ? <Spinner /> : null}\n                    {content && !loading ? <span>Duration approximately {miliseconds}ms</span> : null}\n                    <table  className=\"Account\">\n                        {header}\n                        <tbody>\n                            {content}\n                        </tbody>\n                    </table>\n                    {totalCount === 0 && !loading ? <ResultNotFound /> : null}\n                </Suspense>\n            </div>\n        )\n    }\n}\n\nGithubRepo.prototypes = {\n    fetchRepos: PropTypes.func.isRequired,\n    updateTotalCount: PropTypes.func.isRequired,\n    repos: PropTypes.array.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    repos: state.repos.items,\n    query: state.repos.query,\n    totalCount: state.repos.totalCount,\n    loading: state.repos.loading,\n    totalPages: state.repos.totalPages,\n    currentPage: state.repos.currentPage,\n});\n\nexport default connect(mapStateToProps, { fetchRepos, updateTotalCount })(GithubRepo);\n","import React, { Component } from 'react';\nimport Spinner from './Spinner';\nimport { connect } from 'react-redux';\nimport { storeDetail, findUser } from '../actions/reposActions';\nimport PropTypes from 'prop-types';\nimport '../AccountDetail.css';\nimport { Link } from 'react-router-dom';\n\nclass AccountDetail extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            user: [],\n            repos: this.props.repos,\n            userData: [],\n        };\n    }\n\n    componentDidMount() {\n        //I thought it would help to see some of the ideas I had.\n        // let user = this.props.match.params.id;\n        // this.props.findUser(user);\n        // this.props.storeDetail();\n        // this.setState({user: this.props.user[0]});\n\n        //User is available through params, allowing me to search for the user.\n        const params = this.props.match.params;\n\n        fetch(`https://api.github.com/users/${params.owner}`)\n            .then(res => res.json())\n            .then(data =>{\n                this.setState({userData: data});\n        });\n    }\n\n    render() {\n        const detail = this.state.userData;\n        function openTab() {\n            window.open(detail.html_url);\n        };\n\n        let content = [];\n        content = (\n            <React.Fragment>\n                <Link  to={\"/\"}><span>Back</span></Link>\n                <div className=\"card\">\n                    <img src={detail.avatar_url ? detail.avatar_url :  <Spinner />} alt=\"img\" style={{width:'100%'}} />\n                    <h4>Name: {detail.name ? detail.name : 'Not given'}</h4>\n                    <h4>Login: {detail.login ? detail.login : 'Not given'}</h4>\n                    <p>Bio: {detail.bio ? detail.bio : 'Not given'}</p>\n                    <p>Location: {detail.location ? detail.location : 'Not given'}</p>\n                    <p>Following: {detail.following}</p>\n                    <p>Followers: {detail.followers}</p>\n                    <Link to={\"\"} onClick={openTab}>\n                        <p><button>{detail.login ? detail.login + \"'s Github Account\" : 'View this Github Account'}</button></p>\n                    </Link>\n                </div>  \n            </React.Fragment>);\n\n        let detailView = this.state.userData ? content : null; \n\n        return (\n            <React.Fragment>\n                {detailView}\n            </React.Fragment>\n        )\n    }\n}\n\nAccountDetail.prototypes = {\n    storeDetail: PropTypes.func.isRequired,\n    findUser: PropTypes.func.isRequired,\n    user: PropTypes.array.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    user: state.repos.user,  \n    repos: state.repos.items,  \n});\n\nexport default connect(mapStateToProps, { storeDetail, findUser })(AccountDetail);\n","import { FETCH_REPOS, FETCH_QUERY, STORE_DETAIL, FIND_USER, LOADING, UPDATE_TOTAL_COUNT } from '../actions/types';\n\nconst initialState = {\n    query: '',\n    user:[],\n    items: [],\n    loading: false,\n    totalCount: '',\n    totalPages: 0,\n    currentPage: 0,   \n}\n\nexport default function (state = initialState, action) {\n    switch(action.type) {\n        case FETCH_REPOS:\n            return {\n                ...state,\n                items: action.payload.items || [],\n                query: state.query,\n                loading: false,\n                // totalCount: state.totalCount,\n            };\n        case FETCH_QUERY:\n            return {\n                ...state,\n                query: action.payload\n            };\n        case STORE_DETAIL:\n            return {\n                ...state,\n                user: action.payload\n            };\n        case FIND_USER:\n            return {\n                ...state,\n                user: action.payload,\n                loading: false,\n            };\n        case LOADING:\n            return {\n                ...state,\n                loading: true,\n            };\n        case UPDATE_TOTAL_COUNT:\n            return {\n                ...state,\n                totalCount: action.payload,\n            };\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport reposReducer from './reposReducer';\n\nexport default combineReducers({\n    repos: reposReducer\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer, \n    initialState,\n    compose(\n        applyMiddleware(...middleware),\n        // window.__REDUX_DEVTOOLS_EXTENSION__&& window.__REDUX_DEVTOOLS_EXTENSION__()\n        // The above line had to be commented out in order to use dev tools without issues on tablet/phone\n        window.__REDUX_DEVTOOLS_EXTENSION__\n        ? window.__REDUX_DEVTOOLS_EXTENSION__()\n        : f => f\n    )\n);\n\nexport default store;","import React, { Component } from 'react';\nimport SearchBar from './components/SearchBar';\nimport GithubRepo from './components/GithubRepo';\nimport AccountDetail from './components/AccountDetail';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport {HashRouter as Router, Route} from 'react-router-dom';\n\nimport store from './store';\n\nclass App extends Component {\n  render () {\n    return (\n      <Provider store={store}>\n        <Router>\n          <div className=\"App\">\n            <h1>Explore Github Repositories</h1>\n            <Route exact path=\"/\" component={SearchBar} />\n            <Route exact path=\"/\" component={GithubRepo} />\n            <Route exact path=\"/repo/:owner/:repo\" component={AccountDetail} />\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}