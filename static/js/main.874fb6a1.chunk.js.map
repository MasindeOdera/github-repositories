{"version":3,"sources":["actions/reposActions.js","actions/types.js","components/SearchBar.js","components/GithubRepo.js","components/AccountDetail.js","reducers/reposReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["fetchRepos","query","dispatch","fetch","then","res","json","data","type","payload","console","log","SearchBar","props","state","timeout","handleChange","bind","handleSubmit","e","preventDefault","this","fetchQuery","target","value","searchText","clearTimeout","setTimeout","Fragment","style","display","onSubmit","name","placeholder","flex","padding","search","onChange","autoComplete","className","Component","protoTypes","PropTypes","func","isRequired","connect","repos","Accounts","React","lazy","ResultNotFound","GithubRepo","retrieved","totalCount","setState","Intl","DateTimeFormat","resolvedOptions","timeZone","content","miliseconds","Math","round","performance","getEntries","duration","length","map","index","key","header","fallback","margin","prototypes","array","items","AccountDetail","user","userData","params","match","owner","detail","to","src","avatar_url","alt","width","login","bio","location","following","followers","onClick","window","open","html_url","detailView","storeDetail","findUser","initialState","loading","combineReducers","action","total_count","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","f","App","exact","path","component","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.874fb6a1.chunk.js","sourcesContent":["import { FETCH_REPOS, FETCH_QUERY, STORE_DETAIL, FIND_USER, LOADING } from './types';\n\nexport const fetchRepos = query => dispatch => {\n    fetch(`https://api.github.com/search/repositories?q=${query}+in:repositories?page=2&per_page=100`)\n    .then(res => res.json())\n    .then(data => dispatch({\n        type: FETCH_REPOS,   \n        payload: data,     \n    })).then(data => console.log(data));\n};\n\nexport const fetchQuery = query => {\n    return {\n        type: FETCH_QUERY,\n        payload: query\n    }\n};\n\nexport const storeDetail = () => dispatch => {\n    dispatch({\n        type: STORE_DETAIL,\n    })\n};\n\nexport const findUser = user => dispatch => {\n    fetch(`https://api.github.com/search/users?q=${user}`)\n    .then(res => res.json())\n    .then(data => dispatch({\n        type: FIND_USER,\n        payload: data.items,\n    })).then(data => console.log(data));\n};\n\nexport const setLoading = () => {\n    return {\n        type: LOADING\n    }\n};\n","export const FETCH_REPOS = 'FETCH_REPOS';\nexport const FETCH_QUERY = 'FETCH_QUERY';\nexport const STORE_DETAIL = 'STORE_DETAIL';\nexport const FIND_USER = 'FIND_USER';\nexport const LOADING = 'LOADING';","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchQuery, fetchRepos } from '../actions/reposActions';\nimport '../App.css';\n\nclass SearchBar extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { query: this.props.query};\n        this.timeout =  0;\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    \n    handleChange(e) {\n        e.preventDefault();\n        this.props.fetchQuery(e.target.value);\n\n        //This allows the user to search without hitting submit.\n        let searchText = e.target.value;\n        if(this.timeout) clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => {\n            this.props.fetchRepos(searchText);\n        }, 600);\n    }\n    \n    handleSubmit(e) {\n        e.preventDefault();\n        // this.props.fetchRepos(this.props.query);\n        if(this.props.query !== 'undefined') {\n            this.props.fetchRepos(this.props.query);\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <form style={{ display: 'flex' }} onSubmit={this.handleSubmit}>\n                    <input \n                        type=\"text\" \n                        name=\"title\" \n                        placeholder=\"Search github repositories...\" \n                        style={{flex: '10', padding: '5px'}}\n                        value = {this.state.search}\n                        onChange = {this.handleChange}\n                        autoComplete=\"off\"\n                    />\n                    <input\n                        type=\"submit\"\n                        value=\"Search\"\n                        className=\"btn\"\n                        style={{flex: '1'}}\n                    />\n                </form>\n            </React.Fragment>\n        )\n    }\n}\n\nSearchBar.protoTypes = {\n    fetchQuery: PropTypes.func.isRequired,\n    fetchRepos: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    query: state.repos.query,\n});\n\nexport default connect(mapStateToProps, { fetchQuery, fetchRepos })(SearchBar);\n","import React, { Component, Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchRepos } from '../actions/reposActions';\nimport '../App.css';\n\nconst Accounts = React.lazy(() => import('./Accounts'));\nconst ResultNotFound = React.lazy(() => import('./ResultNotFound'));\n\nexport class GithubRepo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            repos: this.props.repos,\n            retrieved: this.props.retrieved,\n            totalCount: this.props.totalCount,\n        }\n    }\n\n    componentDidMount() {\n        this.setState({repos: this.props.repos});\n        this.setState({totalCount: this.props.totalCount});\n    }\n\n    render() {\n        console.log(Intl.DateTimeFormat().resolvedOptions().timeZone);\n        console.log(\"this.props.totalCount: \", this.props.totalCount);\n        console.log(\"this.props: \", this.props);\n        const {query, repos, totalCount} = this.props;\n        let miliseconds = Math.round(performance.getEntries('measure')[0].duration);\n        let content = '';\n        content = repos.length > 0 ? repos.map((repos, index) => <Accounts key={index} repos={repos} />) : null;\n        const header = repos.length > 0 ? <thead><tr><th>Avatar</th><th>Name</th><th>Description</th><th>Created</th><th>Watchers</th><th>Private</th></tr></thead> : null;\n\n        return (\n            <div>\n                <Suspense fallback={<div>Loading, please wait...</div>}>\n                    {/* The h1 is only displayed once the user types */}\n                    { query ? <h1 style={{margin: '10px 0px 10px 0px',}}>Displaying Repositories with \"{query}\"</h1> : null}\n                    {content ? <span>Duration approximately {miliseconds}ms</span> : null}\n                    <table  className=\"Account\">\n                        {header}\n                        <tbody>\n                            {content}\n                        </tbody>\n                    </table>\n                    {/*retrieved && repos.length === 0 ? <ResultNotFound /> : null*/}\n                    {totalCount === 0 ? <ResultNotFound /> : null}\n                </Suspense>\n            </div>\n        )\n    }\n}\n\nGithubRepo.prototypes = {\n    fetchRepos: PropTypes.func.isRequired,\n    repos: PropTypes.array.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    repos: state.repos.items,\n    query: state.repos.query,\n    retrieved: state.repos.retrieved,\n    totalCount: state.repos.totalCount,\n});\n\nexport default connect(mapStateToProps, { fetchRepos })(GithubRepo);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { storeDetail, findUser } from '../actions/reposActions';\nimport PropTypes from 'prop-types';\nimport '../AccountDetail.css';\nimport { Link } from 'react-router-dom';\n\nclass AccountDetail extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            user: [],\n            repos: this.props.repos,\n            userData: [],\n        };\n    }\n\n    componentDidMount() {\n        //As I have not finished the test, I thought it would help to\n        //see some of the ideas I had. So I left some ideas commented out.\n        // let user = this.props.match.params.id;\n        // this.props.findUser(user);\n        // this.props.storeDetail();\n        // this.setState({user: this.props.user[0]});\n\n        //ran out of time, so did the following:\n        const params = this.props.match.params;\n\n        fetch(`https://api.github.com/users/${params.owner}`)\n            .then(res => res.json())\n            .then(data =>{\n                this.setState({userData: data});\n            });\n    }\n\n    render() {\n        const detail = this.state.userData;\n        function openTab() {\n            window.open(detail.html_url);\n          };\n        \n        let content = [];\n\n        content = (\n            <React.Fragment>\n                <Link  to={\"/\"}><span>Back</span></Link>\n                <div className=\"card\">\n                    <img src={detail.avatar_url} alt=\"img\" style={{width:'100%'}} />\n                    <h4>Name: {detail.name}</h4>\n                    <h4>Login: {detail.login}</h4>\n                    <p>Bio: {detail.bio}</p>\n                    <p>Location: {detail.location}</p>\n                    <p>Following: {detail.following}</p>\n                    <p>Followers: {detail.followers}</p>\n                    <Link to={\"\"} onClick={openTab}>\n                        <p><button>{detail.login}'s Github Account</button></p>\n                    </Link>\n                </div>  \n            </React.Fragment>);\n\n        let detailView = this.state.userData ? content : null; \n\n        return (\n            <React.Fragment>\n                {detailView}\n            </React.Fragment>\n        )\n    }\n}\n\nAccountDetail.prototypes = {\n    storeDetail: PropTypes.func.isRequired,\n    findUser: PropTypes.func.isRequired,\n    user: PropTypes.array.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    user: state.repos.user,  \n    repos: state.repos.items,  \n});\n\nexport default connect(mapStateToProps, { storeDetail, findUser })(AccountDetail);\n","import { FETCH_REPOS, FETCH_QUERY, STORE_DETAIL, FIND_USER, LOADING } from '../actions/types';\n\nconst initialState = {\n    query: '',\n    user:[],\n    items: [],\n    detail: [],\n    loading: true,\n    retrieved: false,\n    totalCount: '',\n    \n}\n\nexport default function (state = initialState, action) {\n    switch(action.type) {\n        case FETCH_REPOS:\n            return {\n                ...state,\n                items: action.payload.items || [],\n                query: state.query,\n                loading: false,\n                retrieved: true,\n                totalCount: action.payload.total_count,\n            };\n        case FETCH_QUERY:\n            return {\n                ...state,\n                query: action.payload\n            };\n        case STORE_DETAIL:\n            return {\n                ...state,\n                user: action.payload\n            };\n        case FIND_USER:\n            return {\n                ...state,\n                user: action.payload,\n                loading: false,\n            };\n        case LOADING:\n            return {\n                ...state,\n                loading: false,\n            };\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport reposReducer from './reposReducer';\n\nexport default combineReducers({\n    repos: reposReducer\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer, \n    initialState,\n    compose(\n        applyMiddleware(...middleware),\n        // window.__REDUX_DEVTOOLS_EXTENSION__&& window.__REDUX_DEVTOOLS_EXTENSION__()\n        // The above line had to be commented out in order to use dev tools without issues on tablet/phone\n        window.__REDUX_DEVTOOLS_EXTENSION__\n        ? window.__REDUX_DEVTOOLS_EXTENSION__()\n        : f => f\n    )\n);\n\nexport default store;","import React, { Component } from 'react';\nimport SearchBar from './components/SearchBar';\nimport GithubRepo from './components/GithubRepo';\nimport AccountDetail from './components/AccountDetail';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport {HashRouter as Router, Route} from 'react-router-dom';\n\nimport store from './store';\n\nclass App extends Component {\n  render () {\n    return (\n      <Provider store={store}>\n        <Router>\n          <div className=\"App\">\n            <h1>Explore Github Repositories</h1>\n            <Route exact path=\"/\" component={SearchBar} />\n            <Route exact path=\"/\" component={GithubRepo} />\n            <Route exact path=\"/repo/:owner/:repo\" component={AccountDetail} />\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}