{"version":3,"sources":["actions/reposActions.js","actions/types.js","components/SearchBar.js","components/GithubRepo.js","reducers/reposReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["fetchRepos","query","dispatch","fetch","then","res","json","data","type","payload","items","console","log","SearchBar","props","state","handleChange","bind","handleSubmit","e","preventDefault","this","fetchQuery","target","value","Fragment","style","display","onSubmit","name","placeholder","flex","padding","search","onChange","className","Component","protoTypes","PropTypes","func","isRequired","connect","repos","GithubRepo","setState","prototypes","array","initialState","item","article","loading","id","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","f","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qSAaaA,EAAa,SAAAC,GAAK,OAAI,SAAAC,GAC/BC,MAAM,gDAAD,OAAiDF,EAAjD,qBACJG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIL,EAAS,CACnBM,KCjBmB,cDkBnBC,QAASF,EAAKG,WACdN,MAAK,SAAAG,GAAI,OAAII,QAAQC,IAAIL,QEb3BM,G,wDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAAEd,MAAO,EAAKa,MAAMb,OACjC,EAAKe,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAJL,E,yDAONE,GACTA,EAAEC,iBACFC,KAAKP,MAAMQ,WAAWH,EAAEI,OAAOC,OAC/Bb,QAAQC,IAAIO,EAAEI,OAAOC,S,mCAGZL,GACTA,EAAEC,iBACFC,KAAKP,MAAMd,WAAWqB,KAAKP,MAAMb,OACjCU,QAAQC,IAAIS,KAAKP,MAAMb,S,+BAIvB,OACI,kBAAC,IAAMwB,SAAP,KACI,0BAAMC,MAAO,CAAEC,QAAS,QAAUC,SAAUP,KAAKH,cAC7C,2BACIV,KAAK,OACLqB,KAAK,QACLC,YAAY,gCACZJ,MAAO,CAACK,KAAM,KAAMC,QAAS,OAC7BR,MAASH,KAAKN,MAAMkB,OACpBC,SAAYb,KAAKL,eAErB,2BACIR,KAAK,SACLgB,MAAM,SACNW,UAAU,MACVT,MAAO,CAACK,KAAM,a,GApCdK,cA4CxBvB,EAAUwB,WAAa,CACnBf,WAAYgB,IAAUC,KAAKC,WAC3BxC,WAAYsC,IAAUC,KAAKC,YAG/B,IAIeC,eAJS,SAAA1B,GAAK,MAAK,CAC9Bd,MAAOc,EAAM2B,MAAMzC,SAGiB,CAAEqB,WFrChB,SAAArB,GACtB,MAAO,CACHO,KCvBmB,cDwBnBC,QAASR,IEkCqCD,cAAvCyC,CAAqD5B,GCtDvD8B,EAAb,kDACI,WAAY7B,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACT2B,MAAO,EAAK5B,MAAM4B,OAHP,EADvB,gEASQrB,KAAKuB,SAAS,CAACF,MAAOrB,KAAKP,MAAM4B,UATzC,+BAYc,IACCzC,EAASoB,KAAKP,MAAdb,MAGP,OAFAU,QAAQC,IAAI,UAAWS,KAAKP,OAC5BH,QAAQC,IAAI,UAAWS,KAAKN,OAExB,6BACMd,EAAQ,6DAAmCA,EAAnC,KAAkD,UAlB5E,GAAgCmC,aAwBhCO,EAAWE,WAAa,CACpB7C,WAAYsC,IAAUC,KAAKC,WAC3BE,MAAOJ,IAAUQ,MAAMN,YAG3B,IAKeC,eALS,SAAA1B,GAAK,MAAK,CAC9B2B,MAAO3B,EAAM2B,MAAMhC,MACnBT,MAAOc,EAAM2B,MAAMzC,SAGiB,CAAED,cAA3ByC,CAAyCE,G,sCCrClDI,EAAe,CACjB9C,MAAO,GACPS,MAAO,GACPsC,KAAM,GACNC,QAAS,GACTC,SAAS,EACTC,GAAI,ICLOC,cAAgB,CAC3BV,MDOW,WAAyC,IAA/B3B,EAA8B,uDAAtBgC,EAAcM,EAAQ,uCACnD,OAAOA,EAAO7C,MACV,IHbmB,cGcf,OAAO,eACAO,EADP,CAEIL,MAAO2C,EAAO5C,QACdR,MAAOc,EAAMd,MACbiD,SAAS,EACTC,GAAIpC,EAAMoC,KAElB,IHpBmB,cGqBf,OAAO,eACApC,EADP,CAEId,MAAOoD,EAAO5C,UAEtB,QACI,OAAOM,MErBbuC,EAAa,CAACC,KAeLC,EAbDC,YACVC,EALiB,GAOjBC,YACIC,IAAe,WAAf,EAAmBN,GAGnBO,OAAOC,6BACLD,OAAOC,+BACP,SAAAC,GAAC,OAAIA,KCQAC,E,uKAdX,OACE,kBAAC,IAAD,CAAUR,MAAOA,GACf,kBAAC,IAAD,KACE,yBAAKrB,UAAU,OACb,2DACA,kBAAC,IAAD,CAAO8B,OAAK,EAACC,KAAK,IAAIC,UAAWtD,IACjC,kBAAC,IAAD,CAAOoD,OAAK,EAACC,KAAK,IAAIC,UAAWxB,W,GAR3BP,aCGEgC,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3E,MAAK,SAAA4E,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxE,QAAQwE,MAAMA,EAAMC,c","file":"static/js/main.dcfbce67.chunk.js","sourcesContent":["import { FETCH_REPOS, FETCH_QUERY } from './types';\n\n// export const fetchRepos = query => dispatch => {\n//     let url = (`https://newsapi.org/v2/everything?q=${search}from=${currentDate}sortBy=popularity&apiKey=9b942d5f77b34e51aac3d8975148928a`);\n//     const req = new Request(url);\n//     fetch(req)\n//         .then(res => res.json())\n//         .then(data => dispatch({\n//             type: FETCH_REPOS,\n//             payload: data.items,\n//         })).then(articles => console.log(articles));\n// };\n\nexport const fetchRepos = query => dispatch => {\n    fetch(`https://api.github.com/search/repositories?q=${query}+in:repositories`)\n    .then(res => res.json())\n    .then(data => dispatch({\n        type: FETCH_REPOS,\n        payload: data.items,\n    })).then(data => console.log(data));\n};\n\nexport const fetchQuery = query => {\n    return {\n        type: FETCH_QUERY,\n        payload: query\n    }\n};\n","export const FETCH_REPOS = 'FETCH_REPOS';\nexport const FETCH_QUERY = 'FETCH_QUERY';","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchQuery, fetchRepos } from '../actions/reposActions';\nimport '../App.css';\n\nclass SearchBar extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { query: this.props.query};\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    \n    handleChange(e) {\n        e.preventDefault();\n        this.props.fetchQuery(e.target.value);\n        console.log(e.target.value);\n    }\n    \n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.fetchRepos(this.props.query);\n        console.log(this.props.query);\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <form style={{ display: 'flex' }} onSubmit={this.handleSubmit}>\n                    <input \n                        type=\"text\" \n                        name=\"title\" \n                        placeholder=\"Search github repositories...\" \n                        style={{flex: '10', padding: '5px'}}\n                        value = {this.state.search}\n                        onChange = {this.handleChange}\n                    />\n                    <input\n                        type=\"submit\"\n                        value=\"Search\"\n                        className=\"btn\"\n                        style={{flex: '1'}}\n                    />\n                </form>\n            </React.Fragment>\n        )\n    }\n}\n\nSearchBar.protoTypes = {\n    fetchQuery: PropTypes.func.isRequired,\n    fetchRepos: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    query: state.repos.query,\n});\n\nexport default connect(mapStateToProps, { fetchQuery, fetchRepos })(SearchBar);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchRepos } from '../actions/reposActions';\n\nexport class GithubRepo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            repos: this.props.repos,\n        }\n    }\n\n    componentDidMount() {\n        this.setState({repos: this.props.repos});\n    }\n\n    render() {\n        const {query} = this.props;\n        console.log(\"props: \", this.props);\n        console.log(\"state: \", this.state);\n        return (\n            <div>\n                { query ? <h1>Displaying Repositories with \"{query}\"</h1> : null}\n            </div>\n        )\n    }\n}\n\nGithubRepo.prototypes = {\n    fetchRepos: PropTypes.func.isRequired,\n    repos: PropTypes.array.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    repos: state.repos.items,\n    query: state.repos.query,\n});\n\nexport default connect(mapStateToProps, { fetchRepos })(GithubRepo);\n","import { FETCH_REPOS, FETCH_QUERY } from '../actions/types';\n\nconst initialState = {\n    query: '',\n    items: [],\n    item: {},\n    article: [],\n    loading: true,\n    id: [],\n}\n\nexport default function (state = initialState, action) {\n    switch(action.type) {\n        case FETCH_REPOS:\n            return {\n                ...state,\n                items: action.payload,\n                query: state.query,\n                loading: false,\n                id: state.id\n            };\n        case FETCH_QUERY:\n            return {\n                ...state,\n                query: action.payload\n            };\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport reposReducer from './reposReducer';\n\nexport default combineReducers({\n    repos: reposReducer\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer, \n    initialState,\n    compose(\n        applyMiddleware(...middleware),\n        // window.__REDUX_DEVTOOLS_EXTENSION__&& window.__REDUX_DEVTOOLS_EXTENSION__()\n        // The above line had to be commented out in order to use dev tools without issues on tablet/phone\n        window.__REDUX_DEVTOOLS_EXTENSION__\n        ? window.__REDUX_DEVTOOLS_EXTENSION__()\n        : f => f\n    )\n);\n\nexport default store;","import React, { Component } from 'react';\nimport SearchBar from './components/SearchBar';\nimport GithubRepo from './components/GithubRepo';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport {HashRouter as Router, Route} from 'react-router-dom';\n\nimport store from './store';\n\nclass App extends Component {\n  render () {\n    return (\n      <Provider store={store}>\n        <Router>\n          <div className=\"App\">\n            <h1>Explore Github Repositories</h1>\n            <Route exact path=\"/\" component={SearchBar} />\n            <Route exact path=\"/\" component={GithubRepo} />\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}