{"version":3,"sources":["actions/reposActions.js","actions/types.js","components/SearchBar.js","components/GithubRepo.js","components/AccountDetail.js","reducers/reposReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["fetchRepos","query","dispatch","fetch","then","res","json","data","type","payload","items","console","log","SearchBar","props","state","timeout","handleChange","bind","handleSubmit","e","preventDefault","this","fetchQuery","target","value","searchText","clearTimeout","setTimeout","Fragment","style","display","onSubmit","name","placeholder","flex","padding","search","onChange","className","Component","protoTypes","PropTypes","func","isRequired","connect","repos","Accounts","React","lazy","GithubRepo","setState","content","miliseconds","Math","round","performance","getEntries","duration","length","map","index","key","header","fallback","margin","prototypes","array","AccountDetail","user","userData","params","match","owner","detail","to","src","avatar_url","alt","width","login","bio","location","following","followers","onClick","window","open","html_url","detailView","storeDetail","findUser","initialState","item","loading","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","f","App","exact","path","component","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3ddb319d.chunk.js","sourcesContent":["import { FETCH_REPOS, FETCH_QUERY, STORE_DETAIL, FIND_USER, LOADING } from './types';\n\nexport const fetchRepos = query => dispatch => {\n    fetch(`https://api.github.com/search/repositories?q=${query}+in:repositories`)\n    .then(res => res.json())\n    .then(data => dispatch({\n        type: FETCH_REPOS,\n        payload: data.items,     \n    })).then(data => console.log(data));\n};\n\nexport const fetchQuery = query => {\n    return {\n        type: FETCH_QUERY,\n        payload: query\n    }\n};\n\nexport const storeDetail = () => dispatch => {\n    dispatch({\n        type: STORE_DETAIL,\n    })\n};\n\nexport const findUser = user => dispatch => {\n    fetch(`https://api.github.com/search/users?q=${user}`)\n    .then(res => res.json())\n    .then(data => dispatch({\n        type: FIND_USER,\n        payload: data.items,\n    })).then(data => console.log(data));\n};\n\nexport const setLoading = () => {\n    return {\n        type: LOADING\n    }\n};\n","export const FETCH_REPOS = 'FETCH_REPOS';\nexport const FETCH_QUERY = 'FETCH_QUERY';\nexport const STORE_DETAIL = 'STORE_DETAIL';\nexport const FIND_USER = 'FIND_USER';\nexport const LOADING = 'LOADING';","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchQuery, fetchRepos } from '../actions/reposActions';\nimport '../App.css';\n\nclass SearchBar extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { query: this.props.query};\n        this.timeout =  0;\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    \n    handleChange(e) {\n        e.preventDefault();\n        this.props.fetchQuery(e.target.value);\n\n        //This allows the user to search without hitting submit.\n        let searchText = e.target.value;\n        if(this.timeout) clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => {\n            this.props.fetchRepos(searchText);\n        }, 300);\n    }\n    \n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.fetchRepos(this.props.query);\n        console.log(this.props.query);\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <form style={{ display: 'flex' }} onSubmit={this.handleSubmit}>\n                    <input \n                        type=\"text\" \n                        name=\"title\" \n                        placeholder=\"Search github repositories...\" \n                        style={{flex: '10', padding: '5px'}}\n                        value = {this.state.search}\n                        onChange = {this.handleChange}\n                    />\n                    <input\n                        type=\"submit\"\n                        value=\"Search\"\n                        className=\"btn\"\n                        style={{flex: '1'}}\n                    />\n                </form>\n            </React.Fragment>\n        )\n    }\n}\n\nSearchBar.protoTypes = {\n    fetchQuery: PropTypes.func.isRequired,\n    fetchRepos: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    query: state.repos.query,\n});\n\nexport default connect(mapStateToProps, { fetchQuery, fetchRepos })(SearchBar);\n","import React, { Component, Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchRepos } from '../actions/reposActions';\nimport '../App.css';\n\nconst Accounts = React.lazy(() => import('./Accounts'));\n\nexport class GithubRepo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            repos: this.props.repos,\n        }\n    }\n\n    componentDidMount() {\n        this.setState({repos: this.props.repos});\n    }\n\n    render() {\n        const {query, repos} = this.props;\n        let miliseconds = Math.round(performance.getEntries('measure')[0].duration);\n        let content = '';\n        content = repos.length > 0 ? repos.map((repos, index) => <Accounts key={index} repos={repos} />) : null;\n        const header = repos.length > 0 ? <thead><tr><th>Avatar</th><th>Name</th><th>Description</th><th>Created</th><th>Watchers</th><th>Private</th></tr></thead> : null;\n\n        return (\n            <div>\n                <Suspense fallback={<div>Loading, please wait...</div>}>\n                    { query ? <h1 style={{margin: '10px 0px 10px 0px',}}>Displaying Repositories with \"{query}\"</h1> : null}\n                    {content ? <span>Duration approximately {miliseconds}ms</span> : null}\n                    <table  className=\"Account\">\n                        {header}\n                        <tbody>\n                            {content}\n                        </tbody>\n                    </table>\n                </Suspense>\n            </div>\n        )\n    }\n}\n\nGithubRepo.prototypes = {\n    fetchRepos: PropTypes.func.isRequired,\n    repos: PropTypes.array.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    repos: state.repos.items,\n    query: state.repos.query,\n});\n\nexport default connect(mapStateToProps, { fetchRepos })(GithubRepo);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { storeDetail, findUser } from '../actions/reposActions';\nimport PropTypes from 'prop-types';\nimport '../AccountDetail.css';\nimport { Link } from 'react-router-dom';\n\nclass AccountDetail extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            user: [],\n            repos: this.props.repos,\n            userData: [],\n        };\n    }\n\n    componentDidMount() {\n        // let user = this.props.match.params.id;\n        // this.props.findUser(user);\n        // this.props.storeDetail();\n        // this.setState({user: this.props.user[0]});\n\n        //ran out of time, so did the following:\n        const params = this.props.match.params;\n\n        fetch(`https://api.github.com/users/${params.owner}`)\n            .then(res => res.json())\n            .then(data =>{\n                this.setState({userData: data});\n            });\n    }\n\n    render() {\n        const detail = this.state.userData;\n        function openTab() {\n            window.open(detail.html_url);\n          };\n        \n        let content = [];\n\n        content = (\n            <React.Fragment>\n                <Link  to={\"/\"}><span>Back</span></Link>\n                <div className=\"card\">\n                    <img src={detail.avatar_url} alt=\"img\" style={{width:'100%'}} />\n                    <h4>Name: {detail.name}</h4>\n                    <h4>Login: {detail.login}</h4>\n                    <p>Bio: {detail.bio}</p>\n                    <p>Location: {detail.location}</p>\n                    <p>Following: {detail.following}</p>\n                    <p>Followers: {detail.followers}</p>\n                    <Link to={\"\"} onClick={openTab}>\n                        <p><button>{detail.login}'s' Github Account</button></p>\n                    </Link>\n                </div>  \n            </React.Fragment>);\n\n        let detailView = this.state.userData ? content : null; \n\n        return (\n            <React.Fragment>\n                {detailView}\n            </React.Fragment>\n        )\n    }\n}\n\nAccountDetail.prototypes = {\n    storeDetail: PropTypes.func.isRequired,\n    findUser: PropTypes.func.isRequired,\n    user: PropTypes.array.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    user: state.repos.user,  \n    repos: state.repos.items,  \n});\n\nexport default connect(mapStateToProps, { storeDetail, findUser })(AccountDetail);\n","import { FETCH_REPOS, FETCH_QUERY, STORE_DETAIL, FIND_USER, LOADING } from '../actions/types';\n\nconst initialState = {\n    query: '',\n    user:[],\n    items: [],\n    item: {},\n    detail: [],\n    loading: true,\n    \n}\n\nexport default function (state = initialState, action) {\n    switch(action.type) {\n        case FETCH_REPOS:\n            return {\n                ...state,\n                items: action.payload,\n                query: state.query,\n                loading: false,\n            };\n        case FETCH_QUERY:\n            return {\n                ...state,\n                query: action.payload\n            };\n        case STORE_DETAIL:\n            return {\n                ...state,\n                user: action.payload\n            };\n        case FIND_USER:\n            return {\n                ...state,\n                user: action.payload,\n                loading: false,\n            };\n        case LOADING:\n            return {\n                ...state,\n                loading: false,\n            };\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport reposReducer from './reposReducer';\n\nexport default combineReducers({\n    repos: reposReducer\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer, \n    initialState,\n    compose(\n        applyMiddleware(...middleware),\n        // window.__REDUX_DEVTOOLS_EXTENSION__&& window.__REDUX_DEVTOOLS_EXTENSION__()\n        // The above line had to be commented out in order to use dev tools without issues on tablet/phone\n        window.__REDUX_DEVTOOLS_EXTENSION__\n        ? window.__REDUX_DEVTOOLS_EXTENSION__()\n        : f => f\n    )\n);\n\nexport default store;","import React, { Component } from 'react';\nimport SearchBar from './components/SearchBar';\nimport GithubRepo from './components/GithubRepo';\nimport AccountDetail from './components/AccountDetail';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport {HashRouter as Router, Route} from 'react-router-dom';\n\nimport store from './store';\n\nclass App extends Component {\n  render () {\n    return (\n      <Provider store={store}>\n        <Router>\n          <div className=\"App\">\n            <h1>Explore Github Repositories</h1>\n            <Route exact path=\"/\" component={SearchBar} />\n            <Route exact path=\"/\" component={GithubRepo} />\n            <Route exact path=\"/repo/:owner/:repo\" component={AccountDetail} />\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}